{"version":3,"sources":["components/Tile.js","components/Game.js","components/Instructions.js","App.js","reportWebVitals.js","index.js"],"names":["Tile","props","className","classnames","active","value","onClick","MainButton","disabled","DisplayMessage","colors","evalColors","Game","generateSolution","solution","Array","cols","fill","i","length","Math","floor","random","renderGuessRow","tiles","push","state","guessRow","guessTileClicked","renderBoard","row","startCell","currentRow","endCell","board","renderTile","renderEvalTiles","evals","colorSelected","setState","selectedColor","renderColorSelect","css","renderSolution","map","val","nextTurn","newActiveRow","parseInt","evaluateMove","myGuess","slice","rightColorRightPlace","solnCopy","guessCopy","rightColorWrongPlace","includes","index","indexOf","splice","newEval","submitMove","newBoard","gameStatus","getGameStatus","dialog","message","messageState","clearDialog","newRow","resetGame","rows","color","lastRow","JSON","stringify","getTurnNumber","clearGuess","this","wonOrLost","class","React","Component","Instructions","App","exact","to","activeClassName","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.976c8953.chunk.js","sourcesContent":["import classnames from 'classnames';\n\n\nexport default function Tile(props) {\n    // return (\n    //     <button className={classnames(props.className, props.active, props.value)} onClick={props.onClick}>\n    //     </button>\n    // );\n    return (\n        <button className={classnames(props.className, props.active, props.value)} onClick={props.onClick}>\n        </button>\n    );\n}","import React from 'react';\nimport Tile from './Tile'\n\n\nfunction MainButton(props) {\n    return (\n        <button disabled={props.disabled} className={props.className} onClick={props.onClick}>\n            <div>\n                {props.value}\n            </div>\n        </button>\n    );\n}\n\nfunction DisplayMessage(props) {\n    return (\n        <div className={props.className}>\n            {props.value}\n        </div>\n    );\n}\n\nconst colors = ['c0', 'c1', 'c2', 'c3', 'c4', 'c5']\nconst evalColors = {\n    rcrp: 'c6',\n    rcwp: 'c7'\n}\n\nclass Game extends React.Component {\n\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            board: Array(props.rows * props.cols).fill(null),\n            evals: Array(props.rows * props.cols).fill(null),\n            solution: this.generateSolution(),\n            guessRow: Array(props.cols).fill(null),\n            currentRow: 0,\n            selectedColor: 0,\n            dialog: {\n                message: null,\n                messageState: 'dialog'\n            }\n        }\n    }\n\n    generateSolution = () => {\n        var solution = Array(this.props.cols).fill(null)\n        for (var i = 0; i < solution.length; i++) {\n            solution[i] = colors[Math.floor(Math.random() * colors.length)]\n        }\n        return solution\n    }\n\n    renderTile(i, active) {\n        return (\n            <Tile value={this.state.board[i]} active={active} className=\"tile board\"></Tile>\n        );\n    }\n\n    renderGuessRow = () => {\n        var tiles = []\n        for (let i = 0; i < this.state.guessRow.length; i++) {\n            tiles.push(<Tile className=\"tile guess\" value={this.state.guessRow[i]} onClick={() => this.guessTileClicked(i)}></Tile>)\n        }\n        return <div className=\"row board\">{tiles}</div>\n    }\n\n    renderBoard = () => {\n        var tiles = []\n        var row = []\n\n        var startCell = this.state.currentRow\n        var endCell = startCell + this.props.cols\n\n        for (let i = 0; i < this.state.board.length; i++) {\n            if (i >= startCell && i < endCell) {\n                row.push(this.renderTile(i, \"active\"))\n            } else {\n                row.push(this.renderTile(i, \"inactive\"))\n            }\n            if ((i + 1) % this.props.cols === 0) {\n                tiles.push(<div className=\"row board\">{row}</div>)\n                row = []\n            }\n        }\n        return tiles\n    }\n\n    renderEvalTiles = () => {\n        var tiles = []\n        var row = []\n        for (let i = 0; i < this.state.evals.length; i++) {\n            row.push(<Tile className=\"tile eval\" value={this.state.evals[i]}></Tile>)\n            if ((i + 1) * 2 % this.props.cols === 0) {\n                tiles.push(<div className=\"row eval\">{row}</div>)\n                row = []\n            }\n        }\n        return tiles\n    }\n\n    colorSelected = (i) => {\n        this.setState({\n            selectedColor: i\n        })\n    }\n\n    renderColorSelect = () => {\n\n        var tiles = []\n\n        for (let i = 0; i < colors.length; i++) {\n            let css = (i === this.state.selectedColor) ? \"tile color active\" : \"tile color inactive\"\n            tiles.push(<Tile className={css} value={colors[i]} onClick={() => this.colorSelected(i)}></Tile>)\n        }\n\n        return tiles\n    }\n\n    renderSolution = () => {\n        let soln = this.state.solution.map(val => <Tile active=\"active\" className=\"tile board\" value={val}></Tile>)\n        return soln\n    }\n\n    nextTurn = () => {\n        var newActiveRow = parseInt(this.state.currentRow) + parseInt(this.props.cols)\n        if (newActiveRow <= this.state.board.length) {\n            return newActiveRow\n        }\n    }\n\n    evaluateMove = () => {\n        var myGuess = this.state.guessRow.slice()\n        /* Determine how many tiles are the right color & wrong place OR right color & right place */\n        var rightColorRightPlace = 0\n\n        var solnCopy = []\n        var guessCopy = []\n\n        for (let i = 0; i < myGuess.length; i++) {\n            if (myGuess[i] === this.state.solution[i]) {\n                rightColorRightPlace++\n            } else {\n                solnCopy.push(this.state.solution[i])\n                guessCopy.push(myGuess[i])\n            }\n        }\n\n        var rightColorWrongPlace = 0\n\n        for (let i = 0; i < guessCopy.length; i++) {\n            if (solnCopy.includes(guessCopy[i])) {\n                rightColorWrongPlace++;\n\n                // remove from soln array so doesn't get same element twice\n                var index = solnCopy.indexOf(guessCopy[i]);\n                if (index !== -1) {\n                    solnCopy.splice(index, 1);\n                }\n            }\n\n        }\n\n        var newEval = this.state.evals.slice()\n        for (let i = 0; i < rightColorRightPlace; i++) {\n            newEval[i + this.state.currentRow] = evalColors['rcrp']\n        }\n        for (let i = 0; i < rightColorWrongPlace; i++) {\n            newEval[i + this.state.currentRow + rightColorRightPlace] = evalColors['rcwp']\n        }\n\n        return newEval\n    }\n\n    submitMove = () => {\n\n        var myGuess = this.state.guessRow.slice()\n        var newBoard = this.state.board.slice()\n\n        // Check that myGuess does not contain null fieldd\n        var guessIsValid = !myGuess.includes(null)\n\n\n        if (guessIsValid) {\n\n            // set the last row to the guess\n            for (let i = 0; i < this.props.cols; i++) {\n                newBoard[i + this.state.currentRow] = myGuess[i]\n            }\n\n            // populate the evaluations\n            let newEval = this.evaluateMove()\n            let newActiveRow = this.nextTurn()\n            \n            // compute game status with new board state\n            let gameStatus = this.getGameStatus(newBoard, newEval, this.state.currentRow)\n\n            // update the board and message\n            this.setState({\n                board: newBoard,\n                evals: newEval,\n                currentRow: newActiveRow,\n                dialog: gameStatus\n            })\n\n\n        } else {\n            this.setState({\n                dialog: {\n                    message: 'Guess is incomplete',\n                    messageState: 'dialog alert'\n                }\n            })\n        }\n    }\n\n    clearDialog = () => {\n        this.setState({\n            dialog: {\n                message: null,\n                messageState: 'dialog'\n            }\n        })\n    }\n\n    guessTileClicked = (i) => {\n        var newRow = this.state.guessRow.slice()\n        newRow[i] = colors[this.state.selectedColor]\n        this.setState({\n            guessRow: newRow\n        })\n    }\n\n    resetGame = () => {\n        this.setState({\n            board: Array(this.props.rows * this.props.cols).fill(null),\n            evals: Array(this.props.rows * this.props.cols).fill(null),\n            guessRow: Array(this.props.cols).fill(null),\n            solution: this.generateSolution(),\n            currentRow: 0,\n            color: null,\n            dialog: {\n                message: null,\n                messageState: 'dialog'\n            }\n        })\n    }\n\n    getGameStatus = (board, evals, currentRow) => {\n        // check if last row evaluations are right color, right place\n        let lastRow = evals.slice(currentRow, currentRow + this.props.cols)\n\n        // If last row is all 'right color right place' then the user won\n        if (JSON.stringify(lastRow) === JSON.stringify((Array(this.props.cols).fill(evalColors['rcrp'])))) {\n            return {\n                message: 'You won!',\n                messageState: 'dialog won'\n            }\n        }\n        else if (currentRow + this.props.cols === board.length) {\n            return {\n                message: 'You lost... The code was:',\n                messageState: 'dialog lost'\n            }\n        } else {\n            return {\n                message: '',\n                messageState: 'dialog'\n\n            }\n        }\n    }\n\n\n    getTurnNumber = () => {\n        for (let i = 0; i < this.props.rows; i++) {\n            if (this.state.board[i * this.props.cols] === null) {\n                return i;\n            }\n        }\n        return -1;\n    }\n\n    clearGuess = () => {\n        this.setState({\n            guessRow: Array(this.props.cols).fill(null)\n        })\n    }\n\n    render() {\n\n        const wonOrLost = this.state.dialog.messageState.includes('won') || this.state.dialog.messageState.includes('lost')\n\n        return (\n            <div class=\"container\">\n                <div class=\"info\">\n                    <DisplayMessage className={this.state.dialog.messageState} value={this.state.dialog.message}></DisplayMessage>\n                    {this.state.dialog.messageState === \"dialog lost\" ? this.renderSolution() : \"\"}\n                </div>\n                <div className=\"game-container board\">\n                    <div className=\"board\">\n                        {this.renderBoard()}\n                    </div>\n                    <div className=\"evals\">\n                        {this.renderEvalTiles()}\n                    </div>\n                </div>\n\n\n                <div className=\"game-container guess\">\n                    {this.renderGuessRow()}\n                    <MainButton value={\"x\"} className=\"button clear-guess\" onClick={this.clearGuess}></MainButton>\n                </div>\n                <div className=\"game-container colors\">\n                    {this.renderColorSelect()}\n                </div>\n                <div className=\"game-container buttons\">\n                    <MainButton onClick={this.submitMove} value=\"Guess\" className=\"button guess\" disabled={wonOrLost ? \"disabled\" : \"\"}></MainButton>\n                    <MainButton onClick={this.resetGame} value=\"New Game\" className=\"button new-game\" disabled=\"\"></MainButton>\n                </div>\n            </div>\n        );\n    }\n\n}\n\nexport default Game;\n","import Tile from './Tile'\n\nexport default function Instructions() {\n    return (\n        <div className=\"help\">\n\n            <p>The goal of Mastermind is to guess the secret code, a sequence of 4 colored pegs generated by the Mastermind. For example, here's a secret code the Mastermind might think of...</p>\n            <Tile active=\"active\" className=\"tile board\" value=\"c0\"></Tile>\n            <Tile active=\"active\" className=\"tile board\" value=\"c4\"></Tile>\n            <Tile active=\"active\" className=\"tile board\" value=\"c3\"></Tile>\n            <Tile active=\"active\" className=\"tile board\" value=\"c1\"></Tile>\n            <hr></hr>\n            <p>Using the colors, create a pattern and click 'guess' to see how close you are. This is what we might guess the code is...</p>\n            <Tile active=\"active\" className=\"tile board\" value=\"c1\"></Tile>\n            <Tile active=\"active\" className=\"tile board\" value=\"c3\"></Tile>\n            <Tile active=\"active\" className=\"tile board\" value=\"c5\"></Tile>\n            <Tile active=\"active\" className=\"tile board\" value=\"c1\"></Tile>\n            <hr></hr>\n\n            <p>Your guess will be checcked, and the evaluataion will appear in the four small pegs on the right of the board. In this case, the evaluation would be...</p>\n            <div className=\"row\">\n                <Tile active=\"active\" className=\"tile eval\" value=\"c6\"></Tile>\n                <Tile active=\"active\" className=\"tile eval\" value=\"c7\"></Tile>\n            </div>\n            <div className=\"row\">\n                <Tile active=\"active\" className=\"tile eval\" value=\"\"></Tile>\n                <Tile active=\"active\" className=\"tile eval\" value=\"\"></Tile>\n            </div>\n            <p>\n                <Tile active=\"active\" className=\"tile eval\" value=\"c6\"></Tile> means one peg in our guess is the right color and is in the right place (the 4th tile in our guess)\n            </p>\n            <p>\n                <Tile active=\"active\" className=\"tile eval\" value=\"c7\"></Tile> means one peg in our guess is the right color but is in the wrong place (the 2nd tile)\n            </p>\n            <p>\n                <Tile active=\"active\" className=\"tile eval\" value=\"\"></Tile> means one peg in our guess is not the right color and therefore not in the secret code (the 1st and 3rd tiles)\n            </p>\n            <p>*Note: the order of the evaluation pegs does not matter</p>\n            <hr></hr>\n            <p>Try to win before you run out of moves. When you guess the code, the evaluation pegs should look like:</p>\n\n            <div className=\"row\">\n                <Tile active=\"active\" className=\"tile eval\" value=\"c6\"></Tile>\n                <Tile active=\"active\" className=\"tile eval\" value=\"c6\"></Tile>\n            </div>\n            <div className=\"row\">\n                <Tile active=\"active\" className=\"tile eval\" value=\"c6\"></Tile>\n                <Tile active=\"active\" className=\"tile eval\" value=\"c6\"></Tile>\n            </div>\n            <br></br>\n        </div>\n    );\n}","import './App.scss';\nimport Game from './components/Game';\nimport Instructions from './components/Instructions'\n\nimport {\n  HashRouter,\n  Route,\n  NavLink\n} from \"react-router-dom\";\n\n\nfunction App() {\n  return (\n    <HashRouter>\n\n\n      <div className=\"App\">\n        <h1>Mastermind</h1>\n        <div>\n          <nav>\n            <ul>\n              <li><NavLink exact to=\"/\" activeClassName=\"is-active\">play</NavLink></li>\n              <li><NavLink to=\"/help\" activeClassName=\"is-active\">instructions</NavLink></li>\n            </ul>\n          </nav>\n        </div>\n\n          <Route exact path=\"/\">\n            <Game rows={10} cols={4}></Game>\n          </Route>\n          <Route path=\"/help\">\n            <Instructions></Instructions>\n          </Route>\n      </div>\n    </HashRouter>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}